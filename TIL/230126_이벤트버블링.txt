# 이벤트 버블링
어떤 HTML 태그에 이벤트가 발생하면 그의 모든 상위요소까지 이벤트가 실행되는 현상 
click이라는 이벤트로 예를 들어보면,
HTML 태그에 클릭이 발생하면 그의 모든 상위요소까지 자동으로 클릭된다는 뜻이다.

# 이벤트리스너 안에서 쓰는 이벤트 함수들 

// 실제 클릭한 요소 알려줌 (이벤트 발생한 곳)
  e.target;

// 지금 이벤트리스너가 달린 곳 알려줌 (참고로 this라고 써도 똑같음)
  e.currentTarget;

// 이벤트 기본 동작을 막아줌
  e.preventDefault();
  
// 내 상위요소로의 이벤트 버블링을 중단해줌 
  e.stopPropagation();

여기서 중요한건 e.target인데, 이벤트 버블링이 일어난다고 해도
사용자가 실제로 클릭한 그 요소는 저 문법으로 찾아낼 수 있다!

# 정리
1. 이벤트 버블링은 항상 일어난다
2. 이벤트 관련 유용한 함수들을 사용가능하다



# Q. 굳이 이벤트리스너 줄여서 코드 짜는 이유

- 버튼이 몇십개 있다면 줄여서 짜는게 덜 복잡하고
- 이벤트리스너를 줄이면 램용량을 절약할 수 있다. (성능개선의 일환)

# dataset 문법
<div data-데이터이름="값"></div> 

html 안에 유저 몰래 정보를 숨겨놓을 수 있다. 
데이터이름 작명하고 값을 넣으면 된다.

# 정리
1. 함수로 축약할 때 변수같은게 있으면 파라미터로 바꾸는게 좋다.
2. 이벤트리스너 줄이면 이점이 있다.
3. dataset 잡기술 알면 이벤트리스너 적게 사용할 때 내가 뭐 눌렀는지 쉽게 파악할 수도 있다.