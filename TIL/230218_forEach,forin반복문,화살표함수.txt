# forEach 반복문

var pants = [28, 30, 32];
pants.forEach(function(){
  console.log('안녕')
});

pants 안의 데이터 갯수만큼 forEach 콜백함수 안에 있는 코드가 실행된다.

var pants = [28, 30, 32];
pants.forEach(function(a, i){
  console.log(a)
});

콜백함수 안에 파라미터 2개까지 작명이 가능한데 (실은 3개까지인데 몰라도 됩니다)
첫 파라미터는 반복문 돌 때 마다 array 안에 있던 하나 하나의 데이터가 되고
둘째 파라미터는 반복문 돌 때 마다 0부터 1씩 증가하는 정수가 됩니다.


# for in 반복문

var obj = { name : 'kim', age : 20 }

for (var key in obj){
  console.log('안녕')
}

object 자료 갯수만큼 반복문을 돌리고 싶으면 for in 반복문을 사용한다.
그리고 for in 반복문 쓰면 object 자료 안에 있는 key와 value를 다 출력해볼 수 있다. 
지금 key라고 작명하는 부분은 반복문이 돌 때 마다 object자료 안에 있던 key값이 됩니다. 


# 반복문의 용도
1. 코드를 복붙하고 싶을 때
2. array, object 자료 다 꺼내고 싶을 때 


# arrow function (화살표 함수) 문법

var pants = [28, 30, 32];
pants.forEach(function(a){
  console.log(a)
});

pants.forEach((a) => {
  console.log(a)
});


# 함수와 arrow function의 기능차이
함수 안에서 this를 써야할 경우 
- 그냥 함수는 함수 안에서 this를 알맞게 재정의해준다.
- arrow function은 함수 안에서 this를 재정의해주지 않고 바깥에 있던 this를 그대로 사용한다.
그래서 이벤트리스너 콜백함수안에서 this를 써야하면 arrow function 쓰면 의도와 다르게 동작할 수 있음.