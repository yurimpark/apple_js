# Document Object Model

자바스크립트가 HTML 조작을 하기 위해 HTML을 자바스크립트가 해석할 수 있는 문법으로 변환

예를 들어서 
<div style="color : red">안녕하세요</div>
브라우저는 이런 HTML을 발견하면 object 자료로 바꿔서 보관

구체적으로는 var document = { } 이런 변수를 하나 만들어서 보관

var document = {
  div1 : {
    style : {color : 'red'}
    innerHTML : '안녕하세요'
  }
}
▲ 이렇게 object 자료에 정리를 해놓는다는 뜻
그래야 점찍어서 원하는 자료를 출력하고 조작하고 할 수 있으니까!
이제 document.div1.innerHTML = '안녕' 이렇게 자바스크립트를 짜면 HTML 조작이 가능할 것임.
그래서 저렇게 object에 담아두는 것. (물론 실제 DOM과 생김새는 좀 다르겠지만)

위 변수를 document object라고 부름. 간지나게 + model이라고 붙여서 Document Object Model이라고 한다.
요약하자면 자바스크립트가 HTML에 대한 정보들 (id, class, name, style, innerHTML 등)을
object 자료로 정리한걸 DOM이라고 부른다.


# 자바스크립트 실행을 약간 나중으로 미루는 방법
"HTML을 다 읽어들였는지"를 알려주는 이벤트리스너
$(document).ready(function(){ 실행할 코드 })
document.addEventListener('DOMContentLoaded', function() { 실행할 코드 }) 

자바스크립트 위치를 내가 정할 수 없을 경우에 유용한 방법


# load 이벤트리스너
DOM 생성뿐만 아니라 이미지, css, js파일이 로드가 됐는지도 체크

셀렉터로찾은이미지.addEventListener('load', function(){
  //이미지 로드되면 실행할 코드 
})
외부 자바스크립트 파일에 저걸 적어놓으면
js 파일보다 이미지가 더 먼저 로드되는 경우도 있으니 이벤트 발생체크를 못할 수도 있음

$(window).on('load', function(){
  //document 안의 이미지, js 파일 포함 전부 로드가 되었을 경우 실행할 코드 
});

window.addEventListener('load', function(){
  //document 안의 이미지, js 파일 포함 전부 로드가 되었을 경우 실행할 코드
})
모든 파일과 이미지의 로드상태를 체크
